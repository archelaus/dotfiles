#!/usr/bin/env bash
#
# Script name: dm-kill
# Description: Search for a process to kill.
# Dependencies: dmenu

set -euo pipefail
_path="$(cd "$(dirname "$BASH_SOURCE")" && cd "$(dirname "$(readlink "$BASH_SOURCE" || echo ".")")" && pwd)"
if [[  -f "${_path}/_dm-helper" ]]; then
  # shellcheck disable=SC1090,SC1091
  source "${_path}/_dm-helper"
else
  # shellcheck disable=SC1090
  echo "No helper-script found"
fi

# script will not hit this if there is no config-file to load
# shellcheck disable=SC1090
source "$(get_config)"

main() {
    # Running ps to get running processes and display in dmenu.
    # In this script we use a variable called $DMENU, in your scripts, you
    # should just write dmenu or rofi or whatever launcher you use.
    selected="$(ps --user "$USER" -F | \
                $DMENU "Search for process to kill:" "$@" | \
                awk '{print $2" "$11}')";

    # Nested 'if' statements.  The outer 'if' statement is what to do
    # when we select one of the 'selected' options listed in dmenu.
    if [[ -n $selected ]]; then
        # Piping No/Yes into dmenu as a safety measure, in case you
        answer="$(echo -e "No\nYes" | $DMENU "Kill $selected?" "$@")"

        if [[ $answer == "Yes" ]]; then
            # This echo command prints everything before the first space.
	    # Luke Smith has a video on why this is most efficient in this case
	    # An alternative way to do it would be with awk or cut, both are less
            # efficient however.
            kill -9 "${selected%% *}"
            echo "Process $selected has been killed." && exit 0
        else
	    # We want this script to exit with a 1 and not 0 because 1 means
	    # an error, so this can be handled by other scripts better
            echo "Program terminated." && exit 1
        fi
    fi
}

[[ "$BASH_SOURCE" = "$0" ]] && main "$@"
