#!/usr/bin/env bash

# https://github.com/LukeSmithxyz/voidrice/blob/master/.local/bin/dmenurecord

# Script name: dm-record
# Description: Dmenu script to record video,audio,webcam.
# Dependencies: dmenu, ffmpeg, pulseaudio, alsa, slop (for recording a specific area)

# Usage:
# `$0`: Ask for recording type via dmenu
# `$0 screencast`: Record both audio and screen
# `$0 video`: Record only screen
# `$0 audio`: Record only audio
# `$0 kill`: Kill existing recording
#
# If there is already a running instance, user will be prompted to end it.

_path="$(cd "$(dirname "$BASH_SOURCE")" && cd "$(dirname "$(readlink "$BASH_SOURCE" || echo ".")")" && pwd)"
if [[  -f "${_path}/_dm-helper" ]]; then
  # shellcheck disable=SC1090,SC1091
  source "${_path}/_dm-helper"
else
  # shellcheck disable=SC1090
  echo "No helper-script found"
fi

# script will not hit this if there is no config-file to load
# shellcheck disable=SC1090
source "$(get_config)"
self="$BASH_SOURCE"

notify() {
  notify-send -a "$self" "$1" "$2"
}

killrecording() {
	recpid="$(cat /tmp/recordingpid)"
	# kill with SIGTERM, allowing finishing touches.
	kill -15 "$recpid"
	rm -f /tmp/recordingpid
	pkill -RTMIN+9 "${STATUSBAR:-dwmblocks}"
	# even after SIGTERM, ffmpeg may still run, so SIGKILL it.
	sleep 3
	kill -9 "$recpid"
  notify killrecording "🔚"
	exit
}

# -s "$(xdpyinfo | grep dimensions | awk '{print $2;}')" \
screencast() {
  notify screencast "⏺️"
	ffmpeg -y \
	-f x11grab \
	-framerate 60 \
	-s "$(xdpyinfo | awk '/dimensions/ {print $2;}')" \
	-i "$DISPLAY" \
	-f pulse -i default \
	-r 30 \
 	-c:v h264 -crf 0 -preset ultrafast -c:a aac \
	"$HOME/screencast-$(get_timestamp).mp4" &
	echo $! > /tmp/recordingpid
}

video() {
  notify video "⏺️"
  ffmpeg \
	-f x11grab \
	-s "$(xdpyinfo | awk '/dimensions/ {print $2;}')" \
	-i "$DISPLAY" \
 	-c:v libx264 -qp 0 -r 30 \
	"$HOME/video-$(get_timestamp).mkv" &
	echo $! > /tmp/recordingpid
}

webcamhidef() {
  notify webcamhidef "🎥"
  ffmpeg \
	-f v4l2 \
	-i /dev/video0 \
	-video_size 1920x1080 \
	"$HOME/webcam-$(get_timestamp).mkv" &
	echo $! > /tmp/recordingpid
}

webcam() {
  notify webcam "🎥"
  ffmpeg \
	-f v4l2 \
	-i /dev/video0 \
	-video_size 640x480 \
	"$HOME/webcam-$(get_timestamp).mkv" &
	echo $! > /tmp/recordingpid
}

audio() {
  notify audio "🎙️"
	ffmpeg \
	-f alsa -i default \
	-c:a flac \
	"$HOME/audio-$(get_timestamp).flac" &
	echo $! > /tmp/recordingpid
}

# the dmenu portions of this script are broken
# TODO: deprecate or rewrite

askrecording() { \
	choice=$(printf "screencast\\nvideo\\nvideo selected\\naudio\\nwebcam\\nwebcam (hi-def)" | $DMENU "Select recording style:")
	case "$choice" in
		screencast) screencast;;
		audio) audio;;
		video) video;;
		*selected) videoselected;;
		webcam) webcam;;
		"webcam (hi-def)") webcamhidef;;
	esac
	}

asktoend() { \
	response=$(printf "No\\nYes" | ${DMENU} "Recording still active. End recording?") &&
	[ "$response" = "Yes" ] &&  killrecording
	}

videoselected() {
	slop -f "%x %y %w %h" > /tmp/slop
	read -r X Y W H < /tmp/slop
	rm /tmp/slop

  ffmpeg -loglevel -8 \
  -f x11grab \
  -framerate 60 \
  -probesize 42M \
	-video_size "$W"x"$H" \
	-i :0.0+"$X,$Y" \
  -f lavfi \
  -i anullsrc=channel_layout=stereo:sample_rate=44100 \
  -vf setpts=N/FR/TB \
  -c:v libx264rgb \
  -preset ultrafast \
  -q:v 1 \
  -threads 4 \
	"$HOME/box-$(get_timestamp).mp4" &

	# ffmpeg \
	# -f x11grab \
	# -framerate 60 \
	# -video_size "$W"x"$H" \
	# -i :0.0+"$X,$Y" \
	# -c:v libx264 -qp 0 -r 30 \
	# "$HOME/box-$(get_timestamp).mkv" &

	echo $! > /tmp/recordingpid
}

case "$1" in
	screencast) screencast;;
	audio) audio;;
	video) video;;
	*selected) videoselected;;
	kill) killrecording;;
	*) ([ -f /tmp/recordingpid ] && asktoend && exit) || askrecording;;
esac
