# ____            _
# | __ )  __ _ ___(_) ___  __   ____ _ _ __ ___
# |  _ \ / _` / __| |/ __| \ \ / / _` | '__/ __|
# | |_) | (_| \__ \ | (__   \ V / (_| | |  \__ \
# |____/ \__,_|___/_|\___|   \_/ \__,_|_|  |___/

set shell bash
set ifs "\n"
set drawbox
set icons
set scrolloff 10
set relativenumber
set truncatechar *

set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

# set reverse
# set sortby time
# set autoquit on
# set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"

# =============================================================================

#  ____                                          _
# / ___|___  _ __ ___  _ __ ___   __ _ _ __   __| |___
#| |   / _ \| '_ ` _ \| '_ ` _ \ / _` | '_ \ / _` / __|
#| |__| (_) | | | | | | | | | | | (_| | | | | (_| \__ \
# \____\___/|_| |_| |_|_| |_| |_|\__,_|_| |_|\__,_|___/

cmd bulkrename ${{
  vimv --git -- $(basename -a -- $fx)
  lf -remote "send $id load"
  lf -remote "send $id unselect"
}}

cmd chmod ${{
  for file in "$fx"; do
    chmod +x $file
  done
  lf -remote 'send reload'
}}

cmd delete ${{
  set -f
  printf "%s\n" "$fx" | sed "s|^$HOME|~|"
  tput bold
  read -p "Delete (y/n)? " choice
  [[ $choice =~ ^[Yy]$ ]] && trash-put $fx
}}

# cmd extract ${{
#   set -f
#   printf "%s\n" "$fx" | sed "s|^$HOME|~|"
#   tput bold
#   read -p "Extract (y/n)? " choice
#   [[ $choice =~ ^[Yy]$ ]] && bsdtar -xvf "$fx"
# }}

cmd extract $bsdtar -xf $f

cmd follow_link %{{
  lf -remote "send ${id} select '$(readlink $f)'"
}}

cmd kdeconnect ${{
  filter_files() {
    for file in $fx; do
      if [[ -f $file ]]; then
        printf "%s\0" "$file"
      else
        printf "Error: Not a regular file: %s\n" "$file" >&2
      fi
    done
  }

  send() {
    filter_files | xargs -0 -I{} kdeconnect-cli --name "$devname" --share {}
    lf -remote "send $id echomsg Files sent!"
    lf -remote "send $id unselect"
  }

  # Select paired device
  names=$(kdeconnect-cli --list-available --name-only 2>/dev/null)
  if [[ -z $names ]]; then
    lf -remote "send $id echomsg No devices paired and available"
    exit
  fi

  ndevs=$(printf "%s" "$names" | awk 'END{print NR}')
  if [[ $ndevs -eq 1 ]]; then
    devname="$names"
  else
    printf "%s" "$names" | awk '{ print NR ". " $0 }'
    printf "Pick a device: "
    read -r pick
    if [[ -n $pick && $pick -eq "$pick" ]]; then
      devname=$(printf '%s' "$names" | awk "NR==$pick")
    fi
  fi

  send
}}

cmd upload ${{
  imgurbash2 -l $fx
}}

cmd mkfile ${{
  printf "File name: "
  read ans
  $EDITOR $ans
}}

cmd mkdir ${{
  printf "Directory name: "
  read ans
  mkdir $ans
}}

cmd newfold ${{
  set -f
  printf "Directory name: "
  read newd
  mkdir -- "$newd"
  mv -- $fx "$newd"
}}

cmd on-cd &{{
  printf "\033]0; $(pwd | sed "s|$HOME|~|") - lf\007" > /dev/tty
}}

cmd open ${{
  case $(file --mime-type -Lb $f) in
    text/*|application/json|inode/x-empty)
      $EDITOR $fx
      ;;
    image/x-xcf)
      setsid -f gimp $f >/dev/null 2>&1
      ;;
    # image/svg+xml)
    #   display -- $f
    #   ;;
    image/*)
      if [ -z "$fs" ]; then
          setsid -f nsxiv-rifle $f
      else
          setsid -f nsxiv "$@" -- $fs
      fi
      ;;
    audio/*)
      mpv --audio-display=no $f
      ;;
    video/*|application/vnd.rn-realmedia)
      setsid -f mpv $f -quiet >/dev/null 2>&1
      ;;
    application/pdf|application/vnd.djvu|application/epub*)
      setsid -f zathura $fx >/dev/null 2>&1
      ;;
    # image/vnd.djvu|application/pdf|application/octet-stream|application/postscript)
    #   setsid -f zathura $fx >/dev/null 2>&1
    #   ;;
    *)
      for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done
      ;;
    esac
}}

# Dynamically set columns
cmd recol ${{
  w=$(tput cols)
  if [ $w -le 80 ]; then
      lf -remote "send $id set ratios 1:2"
      lf -remote "send $id set nopreview"
  else
      lf -remote "send $id set ratios 1:2:3"
      lf -remote "send $id set info size:time"
  fi
}}

# Select all files or directories
cmd select-files ${{
  { echo "$fs"; find -L "$(pwd)" -mindepth 1 -maxdepth 1 -type f; } |
    if [ "$lf_hidden" = "false" ]; then
      # remove any hidden files so you only select files you can see.
      grep -v '/\.[^/]\+$'
    else
      cat
    fi |
    sed '/^$/d' | sort | uniq -u |
    xargs -d '\n' -r -I{} lf -remote "send $id toggle {}"
}}

cmd select-dirs ${{
  { echo "$fs"; find -L "$(pwd)" -mindepth 1 -maxdepth 1 -type d; } |
    if [ "$lf_hidden" = "false" ]; then
      grep -v '/\.[^/]\+$'
    else
      cat
    fi |
    sed '/^$/d' | sort | uniq -u |
    xargs -d '\n' -r -I{} lf -remote "send $id toggle {}"
}}

cmd share $curl -F"file=@$fx" https://0x0.st | xclip -selection c

cmd yank-dirname $dirname -- "$f" | head -c-1 | xclip -i -selection clipboard
cmd yank-path $printf '%s' "$fx" | xclip -i -selection clipboard
cmd yank-basename $basename -a -- $fx | head -c-1 | xclip -i -selection clipboard
cmd yank-basename-without-extension &basename -a -- $fx | rev | cut -d. -f2- | rev | head -c-1 | xclip -i -selection clipboard

# NYI

# cmd bookmark_jump ${{
#     res="$(cat $LF_BOOKMARK_PATH/$(ls $LF_BOOKMARK_PATH | fzf))"
#     lf -remote "send $id cd \"$res\""
# }}

# cmd bookmark_create ${{
#     read ans
#     echo $PWD > $LF_BOOKMARK_PATH/$ans
# }}

# cmd paste &{{
#     set -- $(cat ~/.local/share/lf/files)
#     mode="$1"
#     shift
#     case "$mode" in
#         copy)
#             rsync -av --ignore-existing --progress -- "$@" . |
#             stdbuf -i0 -o0 -e0 tr '\r' '\n' |
#             while IFS= read -r line; do
#                 lf -remote "send $id echo $line"
#             done
#             ;;
#         move) mv -n -- "$@" .;;
#     esac
#     rm ~/.local/share/lf/files
#     lf -remote "send clear"
# }}

# cmd moveto ${{
#     clear; tput cup $(($(tput lines)/3)); tput bold
#     set -f
#     clear; echo "Move to where?"
#     dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
#     for x in $fx; do
#     	eval mv -iv \"$x\" \"$dest\"
#     done &&
#     notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
# }}

# cmd copyto ${{
#     clear; tput cup $(($(tput lines)/3)); tput bold
#     set -f
#     clear; echo "Copy to where?"
#     dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
#     for x in $fx; do
#     	eval cp -ivr \"$x\" \"$dest\"
#     done &&
#     notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
# }}

# =============================================================================

# |_ _|_ __ | |_ ___  __ _ _ __ __ _| |_(_) ___  _ __  ___
#  | || '_ \| __/ _ \/ _` | '__/ _` | __| |/ _ \| '_ \/ __|
#  | || | | | ||  __/ (_| | | | (_| | |_| | (_) | | | \__ \
# |___|_| |_|\__\___|\__, |_|  \__,_|\__|_|\___/|_| |_|___/
#                    |___/

# fzf
# map f $vi $(fzf)

# # Combine fzf with find
# cmd fzf $vi $(find . -name "$1" | fzf)
# map f push :fzf<space>

# Jump in directories using fzf
cmd fzf_jump ${{
  # res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
  res="$(fd -H --max-depth 1 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
  if [ -d "$res" ] ; then
      cmd="cd"
  elif [ -f "$res" ] ; then
      cmd="select"
  else
      exit 0
  fi
  lf -remote "send $id $cmd \"$res\""
}}

# # Git
# cmd git_branch ${{
#     git branch | fzf | xargs git checkout
#     pwd_shell=$(pwd)
#     lf -remote "send $id updir"
#     lf -remote "send $id cd \"$pwd_shell\""
# }}
# map gb :git_branch
# map gp ${{clear; git pull --rebase || true; echo "press ENTER"; read ENTER}}
# map gs ${{clear; git status; echo "press ENTER"; read ENTER}}
# map gl ${{clear; git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit}}

# ripgrep (Search file contents)
cmd fzf_search ${{
  res="$( \
    RG_PREFIX="rg --column --line-number --no-heading --color=always \
        --smart-case "
    FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
        fzf --bind "change:reload:$RG_PREFIX {q} || true" \
        --ansi --layout=reverse --header 'Search in files' \
        | cut -d':' -f1
  )"
  [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}

# trash-cli
cmd trash %trash-put $f

# zoxide
cmd z %{{
  result="$(zoxide query --exclude "${PWD}" -- "$@")"
  lf -remote "send ${id} cd '${result}'"
}}

cmd zi ${{
  result="$(zoxide query -i -- "$@")"
  lf -remote "send ${id} cd '${result}'"
}}

# =============================================================================

#  ____  _           _ _
# | __ )(_)_ __   __| (_)_ __   __ _ ___
# |  _ \| | '_ \ / _` | | '_ \ / _` / __|
# | |_) | | | | | (_| | | | | | (_| \__ \
# |____/|_|_| |_|\__,_|_|_| |_|\__, |___/
#                              |___/

map . set hidden!
map b $,setbg "$f"
map m
map md mkdir
map mf mkfile
map B bulkrename
map D delete
map E extract
map P $bat --paging=always -p "$f"
map V push :!vim<space>

map <c-f> :fzf_jump
map <c-k> :kdeconnect
map <c-n> newfold
map <c-y> $printf "%s" "$f" | xclip -selection clipboard
map <c-z> $ kill -STOP $PPID

map A rename # at the very end
map a push A<a-b> # after extension
map i push A<a-b><c-b> # before extension
map r push A<c-u> # new rename
map I push A<c-a> # at the very beginning

# Movement
map gb cd ~/.local/bin
map gl cd ~/.local/share
map gm cd "/mnt/3. Stuff/Music"
map gc cd ~/.config
map gd cd ~/Downloads
map gp cd ~/Pictures
map gs cd ~/Pictures/Screenshots
# map gs :fzf_search
map gD cd ~/Documents
map gL follow_link

# Custom sort
map sa :set sortby atime; set info atime; set reverse; push gg
map sc :set sortby ctime; set info ctime; set reverse; push gg
map st :set sortby time; set info time; set reverse; push gg
map ss :set sortby size; set info size; set reverse; push gg
map se :set sortby ext; set info; set noreverse; push gg
map sn :set sortby natural; set info size:time; set noreverse; push gg

# TEST
# map x $$f
# map X !$f
# map o &mimeopen "$f"
# map O $mimeopen --ask "$f"
# NYI
# map C copyto
# map M moveto
# map J $lf -remote "send $id cd $(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf)"
# map W $setsid -f $TERMINAL >/dev/null 2>&1

# Source Bookmarks
# source "~/.config/lf/shortcutrc"

# Startup
recol
on-cd
